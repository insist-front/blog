(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{553:function(a,s,e){a.exports=e.p+"assets/img/yarn-1.d64e41cb.jpg"},554:function(a,s,e){a.exports=e.p+"assets/img/yarn-2.065b8bcb.jpg"},555:function(a,s,e){a.exports=e.p+"assets/img/yarn-3.f035b80a.jpg"},556:function(a,s,e){a.exports=e.p+"assets/img/yarn-4.6227b796.jpg"},557:function(a,s,e){a.exports=e.p+"assets/img/yarn-5.32872465.jpg"},659:function(a,s,e){"use strict";e.r(s);var t=e(9),n=Object(t.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"yarn基础架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#yarn基础架构"}},[a._v("#")]),a._v(" YARN基础架构")]),a._v(" "),t("p",[a._v("YARN 主要由 ResourceManager、NodeManager、ApplicationMaster 和 Container 等组件构成。")]),a._v(" "),t("p",[t("img",{attrs:{src:e(553),alt:""}})]),a._v(" "),t("h1",{attrs:{id:"yarn工作机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#yarn工作机制"}},[a._v("#")]),a._v(" YARN工作机制")]),a._v(" "),t("p",[t("img",{attrs:{src:e(554),alt:""}})]),a._v(" "),t("ol",[t("li",[a._v("MR 程序提交到客户端所在的节点")]),a._v(" "),t("li",[a._v("YarnRunner 向ResourceManager 申请一个 Application")]),a._v(" "),t("li",[a._v("RM 将该应用程序的资源路径返回给 YarnRunner")]),a._v(" "),t("li",[a._v("该程序将运行所需资源提交到 HDFS 上")]),a._v(" "),t("li",[a._v("程序资源提交完毕后，申请运行 mrAppMaster")]),a._v(" "),t("li",[a._v("RM 将用户的请求初始化成一个 Task")]),a._v(" "),t("li",[a._v("其中一个NodeManager 领取到 Task 任务")]),a._v(" "),t("li",[a._v("该 NodeManager 创建容器 Container，并产生 MRAppmaster")]),a._v(" "),t("li",[a._v("Container 从HDFS 上拷贝资源到本地")]),a._v(" "),t("li",[a._v("MRAppmaster 向RM 申请运行 MapTask 资源")]),a._v(" "),t("li",[a._v("RM 将运行 MapTask 任务分配给另外两个 NodeManager，另两个 NodeManager 分别领取任务并创建容器")]),a._v(" "),t("li",[a._v("MR 向两个接收到任务的NodeManager 发送程序启动脚本，这两个 NodeManager分别启动 MapTask，MapTask 对数据分区排序")]),a._v(" "),t("li",[a._v("MrAppMaster 等待所有 MapTask 运行完毕后，向 RM 申请容器，运行 ReduceTask")]),a._v(" "),t("li",[a._v("ReduceTask 向 MapTask 获取相应分区的数据")]),a._v(" "),t("li",[a._v("程序运行完毕后，MR 会向 RM 申请注销自己")])]),a._v(" "),t("h1",{attrs:{id:"作业提交全过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作业提交全过程"}},[a._v("#")]),a._v(" 作业提交全过程")]),a._v(" "),t("h3",{attrs:{id:"hdfs、yarn、mapreduce三者关系"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hdfs、yarn、mapreduce三者关系"}},[a._v("#")]),a._v(" HDFS、YARN、MapReduce三者关系")]),a._v(" "),t("p",[t("img",{attrs:{src:e(555),alt:""}})]),a._v(" "),t("h3",{attrs:{id:"作业提交过程之yarn"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作业提交过程之yarn"}},[a._v("#")]),a._v(" 作业提交过程之YARN")]),a._v(" "),t("p",[t("img",{attrs:{src:e(556),alt:""}})]),a._v(" "),t("h3",{attrs:{id:"作业提交过程之hdfs-mapreduce"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#作业提交过程之hdfs-mapreduce"}},[a._v("#")]),a._v(" 作业提交过程之HDFS & MapReduce")]),a._v(" "),t("p",[t("img",{attrs:{src:e(557),alt:""}})]),a._v(" "),t("p",[t("strong",[a._v("作业提交全过程详解")])]),a._v(" "),t("ol",[t("li",[t("p",[a._v("作业提交")]),a._v(" "),t("ol",[t("li",[a._v("Client 调用 job.waitForCompletion 方法，向整个集群提交 MapReduce 作业")]),a._v(" "),t("li",[a._v("Client 向 RM 申请一个作业 id")]),a._v(" "),t("li",[a._v("RM 给 Client 返回该 job 资源的提交路径和作业 id")]),a._v(" "),t("li",[a._v("Client 提交 jar 包、切片信息和配置文件到指定的资源提交路径")]),a._v(" "),t("li",[a._v("Client 提交完资源后，向 RM 申请运行 MrAppMaster")])])]),a._v(" "),t("li",[t("p",[a._v("初始化作业")]),a._v(" "),t("ol",{attrs:{start:"6"}},[t("li",[a._v("当 RM 收到 Client 的请求后，将该 job 添加到容量调度器中")]),a._v(" "),t("li",[a._v("某一个空闲的 NM 领取到该 Job")]),a._v(" "),t("li",[a._v("该 NM 创建 Container，并产生 MRAppmaster")]),a._v(" "),t("li",[a._v("下载Client 提交的资源到本地")])])]),a._v(" "),t("li",[t("p",[a._v("任务分配")]),a._v(" "),t("ol",{attrs:{start:"10"}},[t("li",[a._v("MrAppMaster 向 RM 申请运行多个 MapTask 任务资源")]),a._v(" "),t("li",[a._v("RM 将运行 MapTask 任务分配给另外两个NodeManager，另两个 NodeManager分别领取任务并创建容器")])])]),a._v(" "),t("li",[t("p",[a._v("任务运行")]),a._v(" "),t("ol",{attrs:{start:"12"}},[t("li",[a._v("MR 向两个接收到任务的 NodeManager 发送程序启动脚本， 这两个NodeManager 分别启动 MapTask，MapTask 对数据分区排序。")]),a._v(" "),t("li",[a._v("MrAppMaster 等待所有MapTask 运行完毕后，向RM 申请容器，运行ReduceTask")]),a._v(" "),t("li",[a._v("ReduceTask 向 MapTask 获取相应分区的数据")]),a._v(" "),t("li",[a._v("程序运行完毕后，MR 会向 RM 申请注销自己")])])]),a._v(" "),t("li",[t("p",[a._v("进度和状态更新")]),a._v(" "),t("p",[a._v("YARN 中的任务将其进度和状态(包括 counter)返回给应用管理器,  客户端每秒(通过mapreduce.client.progressmonitor.pollinterval 设置)向应用管理器请求进度更新, 展示给用户")])]),a._v(" "),t("li",[t("p",[a._v("作业完成")]),a._v(" "),t("p",[a._v("除了向应用管理器请求作业进度外, 客户端每 5 秒都会通过调用 waitForCompletion()来检查作业是否完成。时间间隔可以通过mapreduce.client.completion.pollinterval 来设置。作业完成之后, 应用管理器和 Container 会清理工作状态。作业的信息会被作业历史服务器存储以备之后用户核查。")])])]),a._v(" "),t("h1",{attrs:{id:"yarn-调度器和调度算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#yarn-调度器和调度算法"}},[a._v("#")]),a._v(" Yarn 调度器和调度算法")]),a._v(" "),t("p",[a._v("目前，Hadoop 作业调度器主要有三种：FIFO、容量（Capacity Scheduler）和公平（FairScheduler）。Apache Hadoop3.1.3 默认的资源调度器是 Capacity Scheduler。")]),a._v(" "),t("p",[a._v("CDH 框架默认调度器是 Fair Scheduler")]),a._v(" "),t("p",[a._v("具体设置详见：yarn-default.xml 文件")]),a._v(" "),t("h1",{attrs:{id:"yarn常用命令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#yarn常用命令"}},[a._v("#")]),a._v(" Yarn常用命令")]),a._v(" "),t("ol",[t("li",[t("p",[a._v("列出所有Application")]),a._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("yarn")]),a._v(" application -list\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])])]),a._v(" "),t("li",[t("p",[a._v("根据 Application 状态过滤：yarn application -list -appStates（所有状态：ALL、NEW、  NEW_SAVING、SUBMITTED、ACCEPTED、RUNNING、FINISHED、FAILED、KILLED)")]),a._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("yarn")]),a._v(" application -list -appStates FINISHED\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])])]),a._v(" "),t("li",[t("p",[a._v("Kill 掉Application")]),a._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("yarn")]),a._v(" application -kill application_1612577921195_0001\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])])]),a._v(" "),t("li",[t("p",[a._v("查询Application 日志yarn logs -applicationId "),t("ApplicationId")],1),a._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("yarn")]),a._v(" logs -applicationId application_1612577921195_0001\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])])]),a._v(" "),t("li",[t("p",[a._v("查询Container 日志 yarn logs -applicationId "),t("ApplicationId",[a._v(" -containerId "),t("ContainerId")],1)],1),a._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("yarn")]),a._v(" logs -applicationId application_1612577921195_0001 -containerId container_1612577921195_0001_01_000001\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])])]),a._v(" "),t("li",[t("p",[a._v("列出所有Container：yarn container -list "),t("ApplicationAttemptId")],1),a._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("yarn")]),a._v(" container -list appattempt_1612577921195_0001_000001\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])])]),a._v(" "),t("li",[t("p",[a._v("打印 Container 状态：yarn container -status "),t("ContainerId")],1),a._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("yarn")]),a._v(" container -status container_1612577921195_0001_01_000001\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])]),t("p",[t("strong",[a._v("注：只有在任务跑的途中才能看到 container 的状态")])])]),a._v(" "),t("li",[t("p",[a._v("列出所有节点：yarn node -list -all")]),a._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("yarn")]),a._v(" node -list -all\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])])]),a._v(" "),t("li",[t("p",[a._v("加载队列配置：yarn rmadmin -refreshQueues")]),a._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("yarn")]),a._v(" rmadmin -refreshQueues\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])])]),a._v(" "),t("li",[t("p",[a._v("打印队列信息：yarn queue -status "),t("QueueName")],1),a._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[a._v("yarn")]),a._v(" queue -status default\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br")])])])])])}),[],!1,null,null,null);s.default=n.exports}}]);